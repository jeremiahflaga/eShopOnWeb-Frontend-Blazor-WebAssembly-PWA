@page "/"
@attribute [Authorize]
@inject ICatalogService catalogService
@inject IHttpClientFactory ClientFactory
@inject IConfiguration Configuration

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

@if (pagedCatalogItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @*<partial name="_pagination" for="CatalogModel.PaginationInfo" />*@

    <div>
        @foreach (var catalogItem in pagedCatalogItems.CatalogItems)
        {
            <div class="col-md-4">
                asdf
                @*<form asp-page="/Basket/Index" method="post">
                        <img class="esh-catalog-thumbnail" src="@catalogItem.PictureUri" />
                        <input class="esh-catalog-button" type="submit" value="[ ADD TO BASKET ]" />
                        <div class="esh-catalog-name">
                            <span>@catalogItem.Name</span>
                        </div>
                        <div class="esh-catalog-price">
                            <span>@catalogItem.Price.ToString("N2")</span>
                        </div>
                        <input type="hidden" asp-for="@catalogItem.Id" name="id" />
                        <input type="hidden" asp-for="@catalogItem.Name" name="name" />
                        <input type="hidden" asp-for="@catalogItem.PictureUri" name="pictureUri" />
                        <input type="hidden" asp-for="@catalogItem.Price" name="price" />
                    </form>*@
                <img src="@($"{Configuration["webUrl"]}/{catalogItem.PictureUri}")" />
            </div>
        }
    </div>
    @*<partial name="_pagination" for="CatalogModel.PaginationInfo" />*@
}

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private WeatherForecast[] forecasts;
    private ListPagedCatalogItemResponse pagedCatalogItems;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
    }

    protected override async void OnInitialized()
    {
        var catalogItem = await catalogService.GetCatalogItemAsync(1);
        try
        {
            pagedCatalogItems = await catalogService.ListPagedCatalogItemsAsync();
        }
        catch (Exception ex)
        {

            throw;
        }


        var localHttpClient = ClientFactory.CreateClient("LocalHttpClient");
        forecasts = await localHttpClient.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");

    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}